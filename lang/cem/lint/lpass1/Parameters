!File: lint.h
#define	LINT		1	/* if defined, 'lint' is produced	*/


!File: pathlength.h
#define PATHLENGTH	1024	/* max. length of path to file		*/


!File: errout.h
#define	ERROUT		STDERR	/* file pointer for writing messages	*/
#define	ERR_SHADOW	0	/* a syntax error overshadows error messages
					until ERR_SHADOW symbols have been
					accepted without syntax error */


!File: idfsize.h
#define	IDFSIZE	64	/* maximum significant length of an identifier	*/


!File: numsize.h
#define	NUMSIZE	256	/* maximum length of a numeric constant		*/


!File: nparams.h
#define	NPARAMS 32	/* maximum number of parameters of macros	*/


!File: ifdepth.h
#define	IFDEPTH	256	/* maximum number of nested if-constructions	*/


!File: density.h
#define	DENSITY	2	/* see switch.[ch] for an explanation		*/


!File: lapbuf.h
#define	LAPBUF	4096	/* size of macro actual parameter buffer	*/


!File: strsize.h
#define ISTRSIZE	32	/* minimum number of bytes allocated for
					storing a string		*/
#define RSTRSIZE	8	/* step size in enlarging the memory for
					the storage of a string		*/


!File: target_sizes.h
#define MAXSIZE		8	/* the maximum of the SZ_* constants	*/

/* target machine sizes	*/
#if defined(__crayxmp)
#define	SZ_CHAR		(arith)1
#define	SZ_SHORT	(arith)2
#define SZ_WORD		(arith)8
#define	SZ_INT		(arith)8
#define	SZ_LONG		(arith)8
#define	SZ_FLOAT	(arith)8
#define	SZ_DOUBLE	(arith)8
#define	SZ_POINTER	(arith)8
#else
#define	SZ_CHAR		(arith)1
#define	SZ_SHORT	(arith)2
#define SZ_WORD		(arith)4
#define	SZ_INT		(arith)4
#define	SZ_LONG		(arith)4
#define	SZ_FLOAT	(arith)4
#define	SZ_DOUBLE	(arith)8
#define	SZ_POINTER	(arith)4
#endif

/* target machine alignment requirements	*/
#define	AL_CHAR		1
#define	AL_SHORT	SZ_SHORT
#define AL_WORD		SZ_WORD
#define	AL_INT		SZ_WORD
#define	AL_LONG		SZ_WORD
#define	AL_FLOAT	SZ_WORD
#define	AL_DOUBLE	SZ_WORD
#define	AL_POINTER	SZ_WORD
#define AL_STRUCT	1
#define AL_UNION	1


!File: botch_free.h
/*#define BOTCH_FREE	1	/* when defined, botch freed memory, as a check	*/


!File: dataflow.h
/*#define	DATAFLOW	1	/* produce some compile-time xref	*/


!File: debug.h
/*#define DEBUG		1	/* perform various self-tests		*/
#define NDEBUG		1	/* disable assertions			*/


!File: use_tmp.h
/*#define PREPEND_SCOPES	1	/* collect exa, exp, ina and inp commands
					and if USE_TMP is defined let them
					precede the rest of the generated
					compact code	*/
/*#define USE_TMP		1	/* use C_insertpart, C_endpart mechanism
					to generate EM-code in the order needed
					for the code-generators. If not defined,
					the old-style peephole optimizer is
					needed.	*/


!File: parbufsize.h
#define PARBUFSIZE	1024


!File: textsize.h
#define ITEXTSIZE	8	/* 1st piece of memory for repl. text	*/
#define RTEXTSIZE	8	/* stepsize for enlarging repl.text	*/


!File: inputtype.h
#define INP_READ_IN_ONE	1	/* read input file in one	*/


!File: nopp.h
/*#define NOPP		1	/* if NOT defined, use built-int preprocessor */


!File: nobitfield.h
/*#define NOBITFIELD	1	/* if NOT defined, implement bitfields	*/


!File: spec_arith.h
/* describes internal compiler arithmetics */
/*#define	SPECIAL_ARITHMETICS	/* something different from native long */


!File: static.h
#define GSTATIC			/* for large global "static" arrays */


!File: nofloat.h
/*#define NOFLOAT		1	/* if NOT defined, floats are implemented */


!File: noRoption.h
/*#define NOROPTION	1	/* if NOT defined, R option is implemented */


!File: nocross.h
/*#define NOCROSS		1	/* if NOT defined, cross compiler */


!File: regcount.h
/*#define REGCOUNT		1	/* count occurrences for register messages */


!File: dbsymtab.h
/*#define DBSYMTAB		1	/* debugger support */


